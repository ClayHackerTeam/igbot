import { Subject } from 'rxjs';
import * as Bluebird from 'bluebird';
import { Device } from './devices/device';
import { CookieStorage } from './cookies';
import { ChallengeResponse, CheckpointResponse } from '../responses';
export declare class Session {
    device: Device;
    cookieStore: CookieStorage;
    requestEnd$: Subject<{}>;
    checkpoint$: Subject<CheckpointResponse>;
    challenge$: Subject<ChallengeResponse>;
    loginAttemptCount: number;
    private jar;
    constructor(device: Device, cookieStore?: CookieStorage, proxy?: string);
    private _proxyUrl?;
    proxyUrl: string;
    readonly session_id: string;
    readonly uuid: string;
    readonly phone_id: string;
    readonly device_id: string;
    readonly advertising_id: string;
    readonly CSRFToken: any;
    static create(device: Device, storage: CookieStorage, username: string, password: string, proxy?: string): Bluebird<Session>;
    static login(session: Session, username: string, password: string): Bluebird<Session>;
    setDevice(device: Device): this;
    getAccountId(): Bluebird<number>;
    setProxy(url: any): this;
    getAccount(): Promise<import("../responses").UserResponse>;
    destroy(): any;
    login(username: any, password: any): any;
    loginFlow(concurrency?: number): Bluebird<boolean[]>;
    preLoginFlow(concurrency?: number): Bluebird<boolean[]>;
    serializeCookies(): Bluebird<string>;
    deserializeCookies(cookies: string): Promise<void>;
}
